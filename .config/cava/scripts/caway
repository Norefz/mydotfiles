#!/bin/bash

# --- START OF ROBUST CONFIGURATION ---

# Define the path to the pywal color script
PYWAL_COLORS_SCRIPT="${HOME}/.cache/wal/colors.sh"

# Define a default fallback color in case the pywal file doesn't exist
FALLBACK_COLOR="#cdd6f4" # Default text color from your theme

# Check if the pywal color file exists and is readable
if [ -f "$PYWAL_COLORS_SCRIPT" ] && [ -r "$PYWAL_COLORS_SCRIPT" ]; then
  # If it exists, source it to get the color variables
  source "$PYWAL_COLORS_SCRIPT"
  # Set the Cava color from pywal's color7, or use the fallback if the variable is empty
  THEME_COLOR="${color7:-$FALLBACK_COLOR}"
else
  # If the file doesn't exist, just use the fallback color
  THEME_COLOR="$FALLBACK_COLOR"
fi

# --- END OF ROBUST CONFIGURATION ---

# Nuke all internal spawns when script dies
trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM

BARS=8
FRAMERATE=60
EQUILIZER=1

# Get script options (no changes here)
while getopts 'b:f:m:eh' flag; do
  case "${flag}" in
  b) BARS="${OPTARG}" ;;
  f) FRAMERATE="${OPTARG}" ;;
  e) EQUILIZER=0 ;;
  h)
    echo "caway usage: caway [ options ... ]"
    exit 0
    ;;
  esac
done

bar=" ▂▃▄▅▆▇█"
dict="s/;//g;"
i=0
while [ $i -lt ${#bar} ]; do
  dict="${dict}s/$i/${bar:$i:1} /g;"
  i=$((i = i + 1))
done
dict="${dict}s/.$//;"

# All of this temporary file logic can remain the same
cava_waybar_pid="/tmp/cava_waybar_pid"
cava_waybar_pipe="/tmp/cava_waybar.fifo"
if [ -p $cava_waybar_pipe ]; then unlink $cava_waybar_pipe; fi
mkfifo $cava_waybar_pipe

cava_waybar_config="/tmp/cava_waybar_config"
# --- MODIFICATION IS HERE ---
# We inject the theme color into the Cava config that the script creates
echo "
[general]
framerate = $FRAMERATE
bars = $BARS
[output]
method = raw
raw_target = $cava_waybar_pipe
data_format = ascii
ascii_max_range = 7
[color]
gradient = 0
foreground = '$THEME_COLOR'
" >"$cava_waybar_config"
# --- END OF MODIFICATION ---

playerctl_waybar_pipe="/tmp/playerctl_waybar.fifo"
if [ -p $playerctl_waybar_pipe ]; then unlink $playerctl_waybar_pipe; fi
mkfifo $playerctl_waybar_pipe

playerctl -a metadata --format '{"text": "{{artist}} - {{title}}", "tooltip": "{{playerName}} : {{markup_escape(artist)}} - {{markup_escape(title)}}", "alt": "{{status}}", "class": "{{status}}"}' -F >$playerctl_waybar_pipe &

while read -r line; do
  if [[ -f $cava_waybar_pid ]]; then
    while read pid; do
      { kill "$pid" && wait "$pid"; } 2>/dev/null
    done <$cava_waybar_pid
  fi
  echo "$line" | jq --unbuffered --compact-output
  if [[ $EQUILIZER == 1 && $(echo $line | jq -r '.class') == 'Playing' ]]; then
    sleep 2
    cava -p "$cava_waybar_config" >$cava_waybar_pipe &
    echo $! >$cava_waybar_pid
    while read -r cmd2; do
      echo "$line" | jq --arg a "$(echo $cmd2 | sed "$dict")" '.text = $a' --unbuffered --compact-output
    done <$cava_waybar_pipe &
    echo $! >>$cava_waybar_pid
  fi
done <$playerctl_waybar_pipe
